{"version":3,"sources":["parallaxContent.es6"],"names":["Carousel_core","options","_classCallCheck","this","self","slides","$slider","$","selector","$slides","find","slider_counter","each","slide","push","element","element_thumb","slide_settings","data","console","log","current_index","play_interval","interval","slides_count","length","pagination","play","pagination_el","counter","$pagination_el","i","append","on","go_to_index","index","clearInterval","setInterval","go_to","render","direction","forEach","item","removeClass","addClass","carousel_core"],"mappings":"6XAAMA,yBAEF,QAAAA,GAAYC,GAASC,gBAAAC,KAAAH,EAEjB,IAAII,GAAOD,IAEXC,GAAKC,SAGL,IAAIC,GAAUC,EAAEN,EAAQO,UACpBC,EAAUH,EAAQI,KAAK,OAEvBC,EAAiB,CAGrBF,GAAQG,KAAK,SAASC,GAGlBT,EAAKC,OAAOS,MACRC,QAASR,EAAEJ,MACXa,cAAeT,EAAE,kBAAmBI,KAAmB,KACvDM,eAAgBV,EAAEJ,MAAMe,KAAK,oBAIjCC,QAAQC,IAAIT,KAKhBQ,QAAQC,IAAIhB,EAAKC,QAGjBD,EAAKiB,cAAgB,EACrBjB,EAAKkB,cACLlB,EAAKmB,SAAW,EAEhBnB,EAAKoB,aAAepB,EAAKC,OAAOoB,OAE5BxB,EAAQyB,YACRtB,EAAKsB,WAAWzB,EAAQyB,YAE5BtB,EAAKuB,+DAGEC,GAOP,IAAK,GALDxB,GAAOD,KACP0B,EAAU,EAEVC,EAAiBvB,EAAEqB,GAEdG,EAAI,EAAGA,EAAK3B,EAAKoB,aAAcO,IACpCD,EAAeE,OAAO,SAAUH,KAAW,UAG/CC,GAAeG,GAAG,QAAS,OAAQ,WAC/B7B,EAAK8B,YAAY3B,EAAEJ,MAAMgC,0CAM7B,GAAI/B,GAAOD,IAEXiC,eAAchC,EAAKkB,eAEnBlB,EAAKkB,cAAgBe,YAAY,WAE7BjC,EAAKkC,MAAM,YAEI,IAAhBlC,EAAKmB,yCAIR,GAAInB,GAAOD,IAEXiC,eAAchC,EAAKkB,8CAInB,GAAIlB,GAAOD,IAEXC,GAAKkC,MAAM,0CAIX,GAAIlC,GAAOD,IAEXC,GAAKkC,MAAM,gDAGHH,GACR,GAAI/B,GAAOD,IAGXC,GAAKiB,cAAgBc,EAErB/B,EAAKmC,uCAGHC,GAEF,GAAIpC,GAAOD,IAEM,YAAbqC,EAEIpC,EAAKiB,eAAiBjB,EAAKC,OAAOoB,OAAS,EAC3CrB,EAAKiB,cAAgB,EAIrBjB,EAAKiB,gBAIS,YAAbmB,IACqB,GAAtBpC,EAAKiB,cACLjB,EAAKiB,cAAgBjB,EAAKC,OAAOoB,OAAS,EAI1CrB,EAAKiB,iBAIbjB,EAAKmC,0CAML,GAAInC,GAAOD,IAEXC,GAAKC,OAAOoC,QAAQ,SAASC,GACzBA,EAAK3B,QAAQ4B,YAAY,YAG7BvC,EAAKC,OAAOD,EAAKiB,eAAeN,QAAQ6B,SAAS,UAGjDxC,EAAKC,OAAOoC,QAAQ,SAASC,GACzBA,EAAK1B,cAAc2B,YAAY,YAKnCvC,EAAKC,OAAOD,EAAKiB,eAAeL,cAAc4B,SAAS,mBAc3DC,cAAgB,GAAI7C,gBAEpBQ,SAAU,QACVkB,WAAY","file":"parallaxContent.min.js","sourcesContent":["class Carousel_core {\n\n    constructor(options) {\n\n        let self = this;\n\n        self.slides = [];\n\n\n        let $slider = $(options.selector);\n        let $slides = $slider.find('div');\n\n        let slider_counter = 0;\n\n\n        $slides.each(function(slide){\n\n            // console.log($(this).data());\n            self.slides.push({\n                element: $(this),\n                element_thumb: $('.thumb >div:eq('+ slider_counter++  +')'),\n                slide_settings: $(this).data('expandCarousel')\n\n            });\n\n            console.log(slider_counter);\n\n        });\n\n\n        console.log(self.slides);\n\n\n        self.current_index = 0;\n        self.play_interval;\n        self.interval = 2;\n\n        self.slides_count = self.slides.length;\n\n        if (options.pagination) {\n            self.pagination(options.pagination);\n        }\n        self.play();\n    }\n\n    pagination(pagination_el) {\n\n        let self = this;\n        let counter = 0;\n\n        let $pagination_el = $(pagination_el);\n\n        for (let i = 0; i <  self.slides_count; i++) {\n            $pagination_el.append('<span>'+ counter++ +'</span>')\n        }\n\n        $pagination_el.on('click', 'span', function(){\n            self.go_to_index($(this).index())\n        });\n    }\n\n    play() {\n\n        let self = this;\n\n        clearInterval(self.play_interval);\n\n        self.play_interval = setInterval(() => {\n\n            self.go_to('forward');\n\n        }, self.interval * 1000);\n    }\n\n    stop() {\n        let self = this;\n\n        clearInterval(self.play_interval);\n    }\n\n    next() {\n        let self = this;\n\n        self.go_to('forward');\n    }\n\n    prev() {\n        let self = this;\n\n        self.go_to('backward');\n    }\n\n    go_to_index(index) {\n        let self = this;\n\n\n        self.current_index = index;\n\n        self.render();\n    }\n\n    go_to(direction) {\n\n        let self = this;\n\n        if (direction == 'forward') {\n\n            if (self.current_index == self.slides.length - 1) {\n                self.current_index = 0;\n            }\n\n            else {\n                self.current_index++;\n            }\n        }\n\n        else if (direction == 'backward') {\n            if (self.current_index == 0) {\n                self.current_index = self.slides.length - 1;\n            }\n\n            else {\n                self.current_index--;\n            }\n        }\n\n        self.render();\n\n    }\n\n    render(){\n\n        let self = this;\n\n        self.slides.forEach(function(item){\n            item.element.removeClass('active');\n        });\n\n        self.slides[self.current_index].element.addClass('active');\n\n\n        self.slides.forEach(function(item){\n            item.element_thumb.removeClass('active');\n        });\n\n\n        \n        self.slides[self.current_index].element_thumb.addClass('active');\n\n        // $('.main div').removeClass('active');\n\n        // $('.main div:eq(' + self.current_index + ')').addClass('active');\n\n\n        // $('.thumb >div').removeClass('active');\n        //\n        // $('.thumb >div:eq(' + self.current_index + ')').addClass('active');\n    }\n\n}\n\nlet carousel_core = new Carousel_core({\n\n    selector: '.main',\n    pagination: '.pagination'\n});"]}